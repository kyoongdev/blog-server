// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  userId String?  @db.VarChar(120) @unique
  password String? @db.VarChar(250)
  name String? @db.VarChar(120)
  userType UserType? @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postComments PostComment[]
}

model Post{
  id String @id @default(uuid())
  title String @db.VarChar(120)
  thumbnail String @db.VarChar(120)
  description String @db.MediumText
  content String @db.LongText
  viewCount Int @db.Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tags PostTags[]
  keywords PostKeywords[]
  comments PostComment[]
}

model PostComment{
  id String @id @default(uuid())

  content String @db.MediumText

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}



model PostKeywords{
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  keywordId String
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, keywordId])
}

model Keyword {
  id String @id @default(uuid())
  name String

  posts PostKeywords[]
}

model PostTags{  
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String
  tag Tags @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, tagId])
}

model Tags {
  id String @id @default(uuid())
  name String

  posts PostTags[]
  projectSkills ProjectSkills[]
  projectRoles ProjectRoles[]
}

model Project{
  id String @id @default(uuid())

  title String @db.VarChar(120)
  thumbnail String @db.VarChar(120)
  content String @db.MediumText
  link String? @db.MediumText
  startDate DateTime
  endDate DateTime

  skills ProjectSkills[]
  roles ProjectRoles[]
}

model ProjectSkills {
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String
  tag Tags @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, tagId])
}

model ProjectRoles{
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String
  tag Tags @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, tagId])
}

enum UserType {
  ADMIN
  USER
}